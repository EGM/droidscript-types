// Types
declare interface Callback { }
declare type Priority = "Low" | "Medium" | "High";
declare type ScreenMode = "Default" | "Normal" | "Full" | "Game";
declare type Side = "Left" | "Right"
// Components (Simple objects that don't appear on screen.)
declare interface DSComponent {
    id: string;
    data: any;
    Destroy(): void;
    Release(): void;
    Method(name: string, types: string, p1?: any, p2?: any, p3?: any, p4?: any): string | null;
}
export declare interface DSAudioRecorder extends DSComponent {
    GetType(): string;
    SetFile(file: string): void;
    SetSource(source: string): void;
    SetFrequency(frequency: number): void;
    Start(): void;
    Stop(): void;
    Pause(): void;
    GetRMS(): number;
    GetPeak(): number;
    GetData(): any;
}
export declare interface DSBluetoothSerial extends DSComponent {
    GetType(): string;
    Connect(name: string, channel: string): boolean;
    Listen(enabled: boolean): void;
    SetOnConnect(callback: Callback): void;
    SetOnDisconnect(callback: Callback): void;
    Disconnect(): void;
    IsBluetoothEnabled(): boolean;
    RequestEnable(): void;
    IsPaired(name: string): boolean;
    IsConnected(): boolean;
    Write(data: any): void;
    SetOnReceive(callback: Callback): void;
    SetDataMode(mode: string): void;
    SetSplitMode(mode: string, p2: string, p3: string): void;
    SetTimeout(ms: number): void;
    Clear(): void;
}
export declare interface DSCrypt extends DSComponent {
    GetType(): string;
    Hash(text: string, mode: string, options?: string): string | null;
    Encrypt(text: string, password: string): string | null;
    Decrypt(text: string, password: string): string | null;
}
export declare interface DSDatabase {
    name: string;
    GetType(): string;
    GetName(): string;
    ExecuteSql(): void;
    Close(): void;
    Delete(): void;
}
export declare interface DSDownloader extends DSComponent {
    GetType(): string;
    Download(url: string, folder: string, name: string, headers: string): void;
    IsComplete(): boolean;
    GetProgress(): number;
    GetSize(): number;
    SetOnDownload(callback: Callback): void;
    SetOnComplete(callback: Callback): void;
    SetOnCancel(callback: Callback): void;
    SetOnError(callback: Callback): void;
}
export declare interface DSEmail extends DSComponent {
    GetType(): string;
    SetSMTP(server: string, port: number): void;
    SetIMAP(server: string, port: number): void;
    Send(subject?: string, body?: string, sender?: string, recipients?: string, attach?: string): void;
    Receive(folder?: string, maxCount?: number, filter?: string): void;
    SetOnStatus(callback: Callback): void;
    SetOnMessage(callback: Callback): void;
}
export declare interface DSFile extends DSComponent {
    GetType(): string;
    Close(): void;
    ReadText(type: string): string | null;
    ReadTextAsync(type: string, callback: Callback): string | null;
    WriteText(data: string, type: string): void;
    ReadNumber(type: string): number;
    WriteNumber(data: number, type: string): void;
    ReadData(len: number, mode: string): any;
    WriteData(data: string, mode: string): void;
    Seek(offset: number): void;
    Skip(bytes: number): void;
    GetPointer(): number;
    GetLength(): number;
    SetLength(len: number): void;
}
export declare interface DSListDialog extends DSComponent {
    GetType(): string;
    Show(): void;
    Hide(): void;
    Dismiss(): void;
    SetOnTouch(callback: Callback): void;
    SetTitle(title: string): void;
    SetBackColor(color: string): void;
    SetBackground(file: string, options?: string): void;
    SetTextColor(color: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
    SetSize(width: number, height: number, options?: string): void;
    SetTitleHeight(height: number, options?: string): void;
    SetTitleColor(color: string): void;
}
export declare interface DSLocator extends DSComponent {
    GetType(): string;
    SetOnChange(callback: Callback): void;
    Start(): void;
    Stop(): void;
    SetRate(rate: number): void;
    GetDistanceTo(lat: number, lng: number): number;
    GetBearingTo(lat: number, lng: number): number;
}
export declare interface DSMediaPlayer extends DSComponent {
    GetType(): string;
    SetFile(file: string): void;
    SetLooping(loop: boolean): void;
    Close(): void;
    Release(): void;
    Destroy(): void;
    Play(from: number): void;
    Pause(): void;
    Stop(): void;
    IsReady(): boolean;
    IsPlaying(): boolean;
    IsLooping(): boolean;
    SeekTo(time: number): void;
    GetPosition(): number;
    GetDuration(): number;
    SetVolume(left: number, right: number): void;
    SetOnReady(callback: Callback): void;
    SetOnComplete(callback: Callback): void;
    SetOnSeekDone(callback: Callback): void;
}
export declare interface DSMediaStore extends DSComponent {
    GetType(): string;
    QueryMedia(filter: string, sort?: string, options?: string): void;
    SetOnMediaResult(callback: Callback): void;
    QueryArtists(filter: string, sort?: string, options?: string): void;
    SetOnArtistsResult(callback: Callback): void;
    QueryAlbums(filter: string, sort: string, options?: string): void;
    SetOnAlbumsResult(callback: Callback): void;
    GetAlbumArt(img?: DSImage, id?: string, options?: string): boolean;
    GetSongArt(img?: DSImage, id?: string, options?: string): boolean;
}
export declare interface DSNetClient extends DSComponent {
    GetType(): string;
    Connect(address: string, port: string): boolean;
    SetOnConnect(callback: Callback): void;
    Disconnect(): void;
    Close(): void;
    IsEnabled(): boolean;
    IsConnected(): boolean;
    SetTimeout(secs: number): void;
    SendText(text: string, mode: string): void;
    SendBytes(data: any, mode: string): void;
    SendData(text: string, encoding: string): void;
    ReceiveText(mode: string): string | null;
    ReceiveBytes(mode: string): any;
    ReceiveFile(file: string, wait?: number): string | null;
    DownloadFile(file: string): string | null;
    SetOnDownload(callback: Callback): void;
    GetBroadcastAddress(): string | null;
    SendDatagram(data: string, mode: string, address: string, port: number, options?: string): void;
    ReceiveDatagram(mode: string, port: number, timeout: number): string | null;
    ReceiveDatagrams(port: number, mode: string): void;
    ReceiveVideoStream(port: number, img: DSImage): void;
    SetOnReceive(callback: Callback): void;
    AutoReceive(server: string, port: number, mode: string): string | null;
    WakeOnLan(ip: string, mac: string): void;
    SetDataMode(mode: string): void;
    SetSplitMode(mode: string, p2: any, p3: any): void;
    Clear(): void;
}
export declare interface DSNotification extends DSComponent {
    GetType(): string;
    SetMessage(ticker: string, title: string, text: string): void;
    Notify(id: string): void;
    Cancel(id: string): void;
    SetLargeImage(image: DSImage): void;
    SetSmallImage(image: DSImage): void;
    SetLights(color: string, onMs: number, offMs: number): void;
}
export declare interface DSPhoneState extends DSComponent {
    GetType(): string;
    SetOnChange(callback: Callback): void;
    Start(): void;
    Stop(): void;
}
export declare interface DSPlayStore extends DSComponent {
    GetType(): string;
    GetBillingInfo(prodIDs: string, callback: Callback, options?: string): void;
    Purchase(prodID: string, token: string, callback: Callback, options?: string): void;
    GetPurchases(callback: Callback, options?: string): void;
}
export declare interface DSPlugin extends DSComponent {
    GetType(): string;
    Send(cmd: string, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): string | null;
    SendObj(cmd: string, ob: any, p1: any, p2: any, p3: any, p4: any, p5: any, p6: any, p7: any, p8: any): string | null;
    CreateObj(type: string, p1?: string, p2?: string, p3?: string, p4?: string, p5?: string, p6?: string, p7?: string, p8?: string): string | null;
    SendImg(cmd: string, img: DSImage, width: number, height: number): string | null;
    SendCam(cmd: string, cam: DSCameraView): string | null;
    Destroy(): void;
}
export declare interface DSSensor extends DSComponent {
    GetType(): string;
    SetOnChange(callback: Callback): void;
    SetMinChange(min: number): void;
    SetMaxRate(rate: number): void;
    GetNames(): string | null;
    Start(): void;
    Stop(): void;
    GetAzimuth(): number;
    GetPitch(): number;
    GetRoll(): number;
    GetValues(): any;
}
export declare interface DSService extends DSComponent {
    GetType(): string;
    Stop(): void;
    SendMessage(message: string): void;
    SetOnMessage(callback: Callback): void;
    SetInForeground(title: string, text?: string, largeIcon?: string, smallIcon?: string, importance?: string): void;
    SetInBackground(): void;
}
export declare interface DSSms extends DSComponent {
    GetType(): string;
    Send(number: string, message: string, options?: string): void;
    SetOnStatus(callback: Callback): void;
    SetOnMessage(callback: Callback): void;
}
export declare interface DSSpeechRec extends DSComponent {
    GetType(): string;
    Destroy(): void;
    Recognize(): string | null;
    Stop(): void;
    Cancel(): void;
    GetRMS(): number;
    IsListening(): boolean;
    SetOnReady(callback: Callback): void;
    SetOnResult(callback: Callback): void;
    SetOnError(callback: Callback): void;
}
export declare interface DSSynth extends DSComponent {
    GetType(): string;
    Start(): void;
    Stop(): void;
    PlayTone(freq: number, dur: number): void;
    PlayNote(note: number): void;
    PlayMidiTune(tune: string): void;
    SetFrequency(freq: number): void;
    SetWaveShape(shape: string): void;
    SetVolume(left: number, right: number): void;
    SetNoteLength(duration: number): void;
    SetVca(attack: number, decay: number, sustain: number, release: number): void;
    SetVcaAttack(attack: number): void;
    SetVcaDecay(decay: number): void;
    SetVcaSustain(sustain: number): void;
    SetVcaRelease(release: number): void;
    SetVcaEnabled(enable: boolean): void;
    SetVcf(attack: number, decay: number, sustain: number, release: number, cuttoff: number, resonance: number, depth: number): void;
    SetVcfAttack(attack: number): void;
    SetVcfDecay(decay: number): void;
    SetVcfSustain(sustain: number): void;
    SetVcfRelease(release: number): void;
    SetVcfCutoff(cuttoff: number): void;
    SetVcfResonance(resonance: number): void;
    SetVcfDepth(depth: number): void;
    SetVcfEnabled(enable: boolean): void;
    SetPhaser(drywet: number, rate: number, range: number, feedback: number): void;
    SetPhaserDryWet(drywet: number): void;
    SetPhaserRate(rate: number): void;
    SetPhaserRange(range: number): void;
    SetPhaserFeedback(feedback: number): void;
    SetPhaserEnabled(enable: boolean): void;
    SetDelay(ms: number): void;
    SetFeedback(feedback: number): void;
    SetDelayEnabled(enable: boolean): void;
}
export declare interface DSSysProc extends DSComponent {
    GetType(): string;
    Destroy(): void;
    Out(cmd: string): void;
    In(maxLines: number, options?: string): string | null;
    Err(maxLines: number, options?: string): string | null;
    ReadFileAsByte(file: string): number;
    WriteToFile(file: string, data: any): void;
    SetOnInput(callback: Callback): void;
    SetOnError(callback: Callback): void;
}
export declare interface DSTheme extends DSComponent {
    GetType(): string;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
    SetBackColor(color: string): void;
    SetBackground(file: string, options?: string): void;
    SetTextColor(color: string): void;
    SetBtnTextColor(color: string): void;
    SetButtonOptions(options: string): void;
    SetButtonStyle(color1: string, color2: string, radius: number, strokeColor: string, strokeWidth: number, shadow: number, checkColor: string): void;
    SetCheckBoxOptions(options?: string): void;
    SetTextEditOptions(options?: string): void;
    SetProgressBarOptions(options?: string): void;
    SetProgressBackColor(color: string): void;
    SetProgressTextColor(color: string): void;
    SetTitleHeight(height: number, options: string): void;
    SetTitleColor(color: string): void;
    SetTitleDividerColor(color: string): void;
    SetTitleDividerHeight(height: number, options: string): void;
    SetDialogColor(color: string): void;
    SetDialogCornerRadius(radius: number): void;
    SetDialogBtnColor(color: string): void;
    SetDialogBtnTxtColor(color: string): void;
    SetDimBehind(dim: boolean): void;
}
export declare interface DSUsbSerial extends DSComponent {
    GetType(): string;
    Start(): void;
    Stop(): void;
    Write(text: string, encoding: string): void;
    SetOnReceive(callback: Callback): void;
    SetDTR(onOff: boolean): void;
    SetRTS(onOff: boolean): void;
    SetMaxRead(bytes: any): void;
    SetMaxWrite(bytes: any): void;
    SetTimeout(ms: number): void;
    IsConnected(): boolean;
    SetDataMode(mode: string): void;
    SetSplitMode(mode: string, p2?: string, p3?: string): void;
}
export declare interface DSWallpaper extends DSComponent {
    GetType(): string;
    IsVisible(): boolean;
}
export declare interface DSWebserver extends DSComponent {
    GetType(): string;
    Destroy(): void;
    SetFolder(folder: string): void;
    SetUploadFolder(folder: string): void;
    Start(): void;
    Stop(): void;
    SetResponse(text: string): void;
    AddRedirect(pattern: string, location: string): void;
    AddServlet(path: string, callback: Callback): void;
    SendText(text: string, ip: string, id: string): void;
    GetWebSockClients(): any;
    SetOnReceive(callback: Callback): void;
    SetOnUpload(callback: Callback): void;
}
export declare interface DSWebSock {
    Close(): void;
    GetSocket(): WebSocket;
    SetOnMessage(callback: Callback): void;
    SetOnOpen(callback: Callback): void;
    SetOnClose(callback: Callback): void;
    IsOpen(): any;
    Send(msg: string): void;
}
export declare interface DSYesNoDialog extends DSComponent {
    GetType(): string;
    Show(): void;
    Hide(): void;
    Dismiss(): void;
    SetOnTouch(callback: Callback): void;
    SetBackColor(color: string): void;
    SetBackground(file: string, options?: string): void;
    SetSize(width: number, height: number, options?: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
    SetButtonText(yes: string, no: string): void;
}
export declare interface DSZipUtil extends DSComponent {
    GetType(): string;
    Open(file: string): void;
    Create(file: string): void;
    Close(): void;
    List(path: string): string | null;
    Extract(name: string, file: string): void;
    AddFile(name: string, file: string): void;
    AddText(name: string, text: string): void;
    CreateKey(file: string, password: string, name: string, org: string): void;
    CreateDebugKey(file: string): void;
    Sign(fileIn: string, fileOut: string, keyStore: string, password: string): boolean;
    UpdateManifest(fileIn: string, fileOut: string, packageName: string, appName: string, permissions: string, options?: string): void;
}
// Views
export declare interface DSView {
    id: string;
    data: any;
    _left: number;
    _top: number;
    _parent: DSView;
    Destroy(): void;
    Release(): void;
    GetParent(): any;
    Method(name: string, types: string, p1: any, p2: any, p3: any, p4: any): string | null;
    SetVisibility(mode: string): void;
    GetVisibility(): string | null;
    Hide(): void;
    Gone(): void;
    Show(): void;
    IsVisible(): boolean;
    IsEnabled(): boolean;
    SetEnabled(enable: boolean): void;
    SetPadding(left: number, top: number, right: number, bottom: number, mode?: string): void;
    SetMargins(left: number, top: number, right: number, bottom: number, mode?: string): void;
    SetBackground(file: string, options?: string): void;
    SetBackAlpha(alpha: string): void;
    SetBackColor(color: string): void;
    SetBackGradient(color1: string, color2: string, color3: string, options?: string): void;
    SetBackGradientRadial(x: number, y: number, radius: number, color1: string, color2?: string, color3?: string, options?: string): void;
    SetColorFilter(color: string, mode?: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
    SetPosition(left?: number, top?: number, width?: number, height?: number, options?: string): void;
    SetSize(width: number, height: number, options?: string): void;
    GetWidth(options?: string): number;
    GetHeight(options?: string): number;
    GetAbsWidth(): number;
    GetAbsHeight(): number;
    GetLeft(options?: string): number;
    GetTop(options?: string): number;
    GetPosition(options?: string): any;
    SetScale(x: number, y: number): void;
    Focus(): void;
    ClearFocus(): void;
    Tween(target: any, duration: number, type: string, repeat: number, yoyo: boolean, callback: Callback): void;
    Animate(type: string, callback: Callback, time: number): void;
}
export declare interface DSAdView extends DSView {
    GetType(): string;
    Load(): void;
}
export declare interface DSBluetoothList extends DSView {
    GetType(): string;
    SetOnTouch(callback: Callback): void;
    SetOnTouchEx(callback: Callback): void;
}
export declare interface DSButton extends DSView {
    GetType(): string;
    SetEnabled(enable: boolean): void;
    SetOnTouch(callback: Callback): void;
    SetOnLongTouch(callback: Callback): void;
    SetText(text: string): void;
    SetHtml(html: string): void;
    GetText(): string | null;
    SetTextColor(color: string): void;
    SetFontFile(file: string): void;
    SetTextShadow(radius: number, dx: number, dy: number, color: string): void;
    SetTextSize(size: number, mode?: string): void;
    GetTextSize(mode?: string): number;
    SetEllipsize(mode: string): void;
    SetBackColor(color: string): void;
    SetStyle(color1: string, color2: string, radius: number, strokeColor: string, strokeWidth: number, shadow: string): void;
}
export declare interface DSCameraView extends DSView {
    GetType(): string;
    StartPreview(): void;
    StopPreview(): void;
    Focus(): void;
    SetFocusMode(mode: string): void;
    SetZoom(level: number): void;
    GetZoom(): number;
    GetMaxZoom(): number;
    SetOrientation(angle: number): void;
    SetPostRotation(angle: number): void;
    SetPictureSize(width: number, height: number): void;
    SetVideoSize(width: number, height: number): void;
    GetPictureSizes(): string | null;
    SetColorEffect(effect: string): void;
    GetColorEffects(): string | null;
    TakePicture(file: string): void;
    Record(file: string, seconds?: number): void;
    IsRecording(): boolean;
    Stop(): void;
    Stream(ip: string, port: number, quality?: string, fps?: number, mtu?: number): void;
    HasFlash(): boolean;
    SetFlash(onoff: boolean): void;
    SetSound(onoff: boolean): void;
    GetImageWidth(): number;
    GetImageHeight(): number;
    GetCameraCount(): number;
    SetPreviewImage(img: DSImage): void;
    SetDuplicateImage(img1: DSImage, img2: DSImage): void;
    MotionMosaic(xtiles: number, ytiles: number, sensitivity: number, minPeriod: number, img: DSImage): void;
    ReportColors(list: string, callback: Callback, sampSize: number, maxRate: number): void;
    AutoCapture(path: string, file: string, maxCount: number): void;
    SetOnReady(callback: Callback): void;
    SetOnMotion(callback: Callback): void;
    SetOnPicture(callback: Callback): void;
    SetOnFocus(callback: Callback): void;
    GetPixelData(format: string, left: number, top: number, width: number, height: number): string | null;
    FindFaces(max: number): any;
    GetParameters(): string | null;
    SetParameter(name: string, value: string | number): void;
}
export declare interface DSCheckBox extends DSView {
    GetType(): string;
    SetOnTouch(callback: Callback): void;
    SetText(text: string): void;
    GetText(): string | null;
    SetTextColor(color: string): void;
    SetTextSize(size: number, mode?: string): void;
    GetTextSize(mode?: string): number;
    SetChecked(checked: boolean): void;
    GetChecked(): boolean;
    SetColorFilter(color: string, mode?: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
}
export declare interface DSCodeEdit extends DSView {
    GetType(): string;
    GetText(): string | null;
    GetSelectedText(): string | null;
    SetText(text: string): void;
    SetHtml(html: string): void;
    Undo(): void;
    Redo(): void;
    Copy(): void;
    Cut(): void;
    Paste(): void;
    SetSelectMode(onOff: boolean): void;
    GetSelectMode(): boolean;
    SelectAll(): void;
    Search(text: string, direction?: string, matchCase?: boolean, wholeWord?: boolean): void;
    Replace(text: string): void;
    ReplaceAll(text: string, newText: string, matchCase?: boolean, wholeWord?: boolean): void;
    SetUseKeyboard(onOff: boolean): void;
    SetNavigationMethod(method: string): void;
    ClearHistory(): void;
    SetTextSize(size: number, mode?: string): void;
    SetTextColor(color: string): void;
    SetColorScheme(scheme: string): void;
    GetCursorLine(): number;
    GetLineStart(line: number): number;
    HighlightLine(line: number): void;
    SetCursorPos(position: number): void;
    GetCursorPos(): number;
    InsertText(text: string, start: number, end: number): void;
    ReplaceText(text: string, start: number, end: number): void;
    SetSelection(start: number, stop: number): void;
    SetLanguage(ext: string): void;
    SetOnChange(callback: Callback): void;
    SetOnDoubleTap(callback: Callback): void;
    SetOnKey(callback: Callback): void;
}
export declare interface DSDialog extends DSView {
    GetType(): string;
    SetOnTouch(callback: Callback): void;
    AddLayout(layout: DSLayout): void;
    RemoveLayout(layout: DSLayout): void;
    Show(): void;
    Hide(): void;
    IsVisible(): boolean;
    Dismiss(): void;
    SetTitle(title: string, options?: string): void;
    SetBackColor(color: string, radius?: number): void;
    SetBackground(file: string, options?: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
    SetSize(width: number, height: number, options?: string): void;
    SetPosition(left: number, top: number, width: number, height: number, options?: string): void;
    SetOnCancel(callback: Callback): void;
    EnableBackKey(enable: boolean): void;
    SetOnBack(callback: Callback): void;
    SetTitleHeight(height: number, options?: string): void;
    SetTitleTextSize(height: number, options?: string): void;
    SetTitleColor(color: string): void;
    SetTitleDividerColor(color: string): void;
    SetTitleDividerHeight(height: number, options?: string): void;
}
export declare interface DSGameView extends DSView {
    GetType(): string;
    Destroy(): void;
    SetFile(file: string): void;
    Execute(js: string): void;
    SetFrameRate(fps: number): void;
}
export declare interface DSGLView extends DSView {
    GetType(): string;
    Release(): void;
    Destroy(): void;
    Execute(p1: string, p2?: string, p3?: string, p4?: string): void;
    Exec(p1: string, p2?: string, p3?: string, p4?: string): void;
    SetOnTouch(callback: Callback): void;
    SetOnTouchUp(callback: Callback): void;
    SetOnTouchMove(callback: Callback): void;
    SetOnTouchDown(callback: Callback): void;
    SetTouchable(touchable: boolean): void;
}
export declare interface DSImage extends DSView {
    GetType(): string;
    Clear(): void;
    Update(): void;
    SetAutoUpdate(onoff: boolean): void;
    SetPixelMode(onoff: boolean): void;
    SetName(name: string): void;
    GetName(): string | null;
    SetImage(image: DSImage | string, width?: number, height?: number, options?: string): void;
    GetPixelData(format: string, left: number, top: number, width: number, height: number): string | null;
    SetPixelData(data: string, width: number, height: number, options?: string): string | null;
    GetPixelColor(x: number, y: number): any;
    SetSize(width: number, height: number, options?: string): void;
    GetHeight(): number;
    GetWidth(): number;
    GetAbsHeight(): number;
    GetAbsWidth(): number;
    SetOnTouch(callback: Callback): void;
    SetOnTouchUp(callback: Callback): void;
    SetOnTouchMove(callback: Callback): void;
    SetOnTouchDown(callback: Callback): void;
    SetOnLongTouch(callback: Callback): void;
    SetOnLoad(callback: Callback): void;
    SetTouchable(touchable: boolean): void;
    SetMaxRate(ms: number): void;
    SetColorFilter(color: string, mode?: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
    MeasureText(text: string): any;
    DrawImage(image: DSImage, x?: number, y?: number, w?: number, h?: number, angle?: number, mode?: string): void;
    DrawImageMtx(image: DSImage, matrix: string): void;
    DrawPoint(x: number, y: number): void;
    DrawCircle(x: number, y: number, radius: number): void;
    DrawArc(x1: number, y1: number, x2: number, y2: number, start: number, sweep: number): void;
    DrawLine(x1: number, y1: number, x2: number, y2: number): void;
    DrawRectangle(x1: number, y1: number, x2: number, y2: number): void;
    DrawText(text: string, x: number, y: number): void;
    DrawSamples(data: number[], range: number): void;
    SetAlpha(alpha: number): void;
    SetColor(color: string): void;
    SetTextSize(size: number): void;
    SetFontFile(file: string): void;
    SetLineWidth(width: number): void;
    SetPaintColor(color: string): void;
    SetPaintStyle(style: string): void;
    Rotate(angle: number, pivX?: number, pivY?: number): void;
    Move(x: number, y: number): void;
    Scale(x: number, y: number): void;
    Skew(x: number, y: number): void;
    Transform(matrix: string): void;
    Reset(): void;
    Flatten(): void;
    Save(fileName: string, quality?: string): void;
    DrawFrame(ms: number): void;
    Play(ms: number): void;
    Draw(func: string, p1?: any, p2?: any, p3?: any, p4?: any, p5?: any, p6?: any, p7?: any): void;
}
export declare interface DSLayout extends DSView {
    GetType(): string;
    SetOrientation(orientation: string): void;
    SetGravity(gravity: string): void;
    AddChild(child: DSView, order?: number): void;
    RemoveChild(child: DSView): void;
    DestroyChild(child: DSView): void;
    ChildToFront(child: DSView): void;
    GetChildOrder(child: DSView): number;
    Animate(type: string, callback: Callback, time: number): void;
    SetCornerRadius(radius: number): void;
    SetElevation(elevation: number): void;
    SetBackColor(color: string): void;
    SetTouchable(touchable: boolean): void;
    SetTouchThrough(through: boolean): void;
    SetOnTouch(callback: Callback): void;
    SetOnTouchUp(callback: Callback): void;
    SetOnTouchMove(callback: Callback): void;
    SetOnTouchDown(callback: Callback): void;
    SetOnLongTouch(callback: Callback): void;
    SetOnChildChange(callback: Callback): void;
}
export declare interface DSList extends DSView {
    GetType(): string;
    SetList(list: string, delim?: string): void;
    GetList(delim?: string): any;
    AddItem(title: string, body?: string, image?: string): void;
    InsertItem(index: number, title: string, body?: string, image?: string): void;
    SetItem(title: string, newTitle: string, newBody?: string, newImage?: string): void;
    SetItemByIndex(index: number, newTitle: string, newBody?: string, newImage?: string): void;
    RemoveItem(title: string): void;
    RemoveItemByIndex(index: number): void;
    RemoveAll(): void;
    SelectItem(title: string, body?: string, scroll?: boolean): void;
    SelectItemByIndex(index: number, scroll: boolean): void;
    GetItem(title: string): any;
    GetItemByIndex(index: number): any;
    GetLength(): number;
    ScrollToItem(title: string, body?: string): void;
    ScrollToItemByIndex(index: number): void;
    SetOnTouch(callback: Callback): void;
    SetOnLongTouch(callback: Callback): void;
    SetTextColor(color: string): void;
    SetTextColor1(color: string): void;
    SetTextColor2(color: string): void;
    SetHiTextColor1(color: string): void;
    SetHiTextColor2(color: string): void;
    SetTextSize(size: number, mode?: string): void;
    SetTextSize1(size: number, mode?: string): void;
    SetTextSize2(size: number, mode?: string): void;
    GetTextSize(mode?: string): number;
    SetColumnWidths(icon: number, title: number, body: number, mode?: number): void;
    SetTextMargins(left: number, top: number, right: number, bottom: number, mode?: string, options?: string): void;
    SetIconMargins(left: number, top: number, right: number, bottom: number, mode?: string): void;
    SetIconSize(size: number, mode?: string): void;
    SetEllipsize(mode: string): void;
    SetEllipsize1(mode: string): void;
    SetEllipsize2(mode: string): void;
    SetTextShadow(radius: number, dx: number, dy: number, color: string): void;
    SetTextShadow1(radius: number, dx: number, dy: number, color: string): void;
    SetTextShadow2(radius: number, dx: number, dy: number, color: string): void;
    SetDivider(height: number, color: string): void;
    SetFontFile(file: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
}
export declare interface DSListView extends DSView {
    GetType(): string;
    Show(): void;
    SetOnTouch(callback: Callback): void;
}
export declare interface DSOverlay extends DSView {
    GetType(): string;
    AddLayout(layout: DSLayout, left?: number, top?: number, options?: string): void;
    RemoveLayout(layout: DSLayout): void;
}
export declare interface DSScroller extends DSView {
    GetType(): string;
    AddChild(child: DSView): void;
    RemoveChild(child: DSView): void;
    DestroyChild(child: DSView): void;
    ScrollTo(x: number, y: number): void;
    ScrollBy(x: number, y: number): void;
    GetScrollX(): number;
    GetScrollY(): number;
}
export declare interface DSSeekbar extends DSView {
    GetType(): string;
    SetOnTouch(callback: Callback): void;
    SetOnChange(callback: Callback): void;
    GetValue(): number;
    SetValue(value: number): void;
    SetRange(range: number): void;
    SetMaxRate(rate: number): void;
    SetColorFilter(color: string, mode?: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
}
export declare interface DSSpinner extends DSView {
    GetType(): string;
    SetOnTouch(callback: Callback): void;
    SetOnChange(callback: Callback): void;
    SetText(text: string): void;
    SelectItem(item: string): void;
    GetText(): string | null;
    SetTextColor(color: string): void;
    SetTextSize(size: number, mode?: string): void;
    GetTextSize(mode?: string): number;
    SetList(list: string, delim: string): void;
    AdjustColor(hue: number, saturation: number, brightness: number, contrast: number): void;
}
export declare interface DSText extends DSView {
    GetType(): string;
    SetText(text: string): void;
    SetHtml(html: string): void;
    GetHtml(): string | null;
    Log(message: string, options?: string): void;
    SetLog(maxLines: number): void;
    SetTextSize(size: number, mode?: string): void;
    GetTextSize(mode?: string): number;
    GetText(): string | null;
    SetTextColor(color: string): void;
    SetFontFile(file: string): void;
    GetLineCount(): number;
    GetMaxLines(): number;
    GetLineTop(line: number): number;
    GetLineStart(line: number): number;
    SetEllipsize(mode: string): void;
    SetTextShadow(radius: number, dx: number, dy: number, color: string): void;
    SetOnTouch(callback: Callback): void;
    SetOnTouchUp(callback: Callback): void;
    SetOnTouchMove(callback: Callback): void;
    SetOnTouchDown(callback: Callback): void;
    SetOnLongTouch(callback: Callback): void;
    SetTouchable(touchable: boolean): void;
}
export declare interface DSTextEdit extends DSView {
    GetType(): string;
    SetText(text: string): void;
    SetHtml(html: string): void;
    GetHtml(): string | null;
    SetHint(text: string): void;
    InsertText(text: string, start: number): void;
    ReplaceText(text: string, start: number, end: number): void;
    GetText(): string | null;
    SetOnChange(callback: Callback): void;
    SetOnTouch(callback: Callback): void;
    SetOnEnter(callback: Callback): void;
    SetOnFocus(callback: Callback): void;
    SetTextColor(color: string): void;
    SetTextSize(size: number, mode?: string): void;
    GetTextSize(mode?: string): number;
    GetLineCount(): number;
    GetMaxLines(): number;
    GetLineTop(line: number): number;
    GetLineStart(line: number): number;
    SetCursorColor(color: string): void;
    SetCursorPos(position: number): void;
    GetCursorPos(): number;
    GetCursorLine(): number;
    SetSelection(start: number, stop: number): void;
    GetSelectedText(): string | null;
    GetSelectionStart(): number;
    GetSelectionEnd(): number;
    Undo(): void;
    Redo(): void;
    ClearHistory(): void;
}
export declare interface DSToggle extends DSView {
    GetType(): string;
    SetOnTouch(callback: Callback): void;
    SetText(text: string): void;
    GetText(): string | null;
    SetTextColor(color: string): void;
    SetTextSize(size: number, mode?: string): void;
    GetTextSize(mode?: string): number;
    SetChecked(checked: boolean): void;
    GetChecked(): boolean;
    SetStyle(color1: string, color2: string, radius: number, strokeColor: string, strokeWidth: number, shadow: string, checkColor: string): void;
}
export declare interface DSVideoView extends DSView {
    GetType(): string;
    SetFile(file: string): void;
    SetSubtitles(file: string): void;
    Play(): void;
    Pause(): void;
    Stop(): void;
    IsReady(): boolean;
    IsPlaying(): boolean;
    SeekTo(secs: number): void;
    GetPosition(): number;
    GetDuration(): number;
    SetVolume(left: number, right: number): void;
    SetOnReady(callback: Callback): void;
    SetOnComplete(callback: Callback): void;
    SetOnError(callback: Callback): void;
    SetOnSubtitle(callback: Callback): void;
}
export declare interface DSWebView extends DSView {
    GetType(): string;
    SetOnProgress(callback: Callback): void;
    SetOnError(callback: Callback): void;
    SetOnConsole(callback: Callback): void;
    LoadHtml(html: string, base?: string, options?: string): void;
    LoadUrl(url: string, options?: string): void;
    Reload(): void;
    Back(): void;
    Forward(): void;
    CanGoBack(): boolean;
    CanGoForward(): boolean;
    Execute(code: string, callback: Callback): void;
    ClearHistory(): void;
    GetUrl(): string | null;
    GetTitle(): string | null;
    Capture(file: string): void;
    Print(): void;
    SetZoom(zoom: number): void;
    SetTextZoom(zoom: number): void;
    SetUserAgent(agent: string): void;
    SetUserCreds(name: string, password: string): void;
    SimulateKey(keyName: string, modifiers?: string, pause?: number): void;
    SetRedirect(urlFrom: string, urlTo: string): void;
    SetTouchMode(mode: boolean): void;
    SetOnTouch(callback: Callback): void;
}
// App
export declare interface App {
    GetType(): string;
    GetObjects(): any;
    IsStarted(): boolean;
    Exit(kill?: boolean): void;
    Quit(msg?: string, title?: string, options?: string): void;
    ToBack(): void;
    ToFront(): void;
    Execute(js: string): void;
    StartApp(file: string, options?: string, intent?: string): void;
    StopApp(name: string): void;
    SetScreenMode(mode: ScreenMode): void;
    SetOptions(options: string): void;
    SetTheme(theme: any): void;
    SetDensity(dpi: number): void;
    SetPosition(left: number, top: number, width: number, height: number, options?: string): void;
    SetBackColor(color: string): void;
    SetNavBarColor(color: string): void;
    SetStatusBarColor(color: string): void;
    StartService(packageName: string, className: string): void;
    StopService(): void;
    StartDebugServer(): void;
    StopDebugServer(): void;
    SendIntent(packageName: string, className: string, action: string, category: string, uri: string, type: string, extras: string, options?: string, callback?: Callback): void;
    BroadcastIntent(action: string, category: string, data: string, type: string, extras: string, options?: string): void;
    SendMessage(message: string): void;
    SetInForeground(title?: string, text?: string, largeIcon?: string, smallIcon?: string, importance?: string): void;
    SetInBackground(): void;
    Script(file: string): void;
    LoadScript(url: string, callback?: Callback): void;
    LoadPlugin(url: string): void;
    SysExec(cmd: string, options?: string, maxRead?: number, timeout?: number): string | null;
    ExtExec(name: string, file: string, args: string, options?: string): string | null;
    SetPriority(level: Priority): void;
    GetName(): string | null;
    GetPath(): string | null;
    GetAppName(): string | null;
    GetAppPath(): string | null;
    GetVersion(): number;
    GetDSVersion(): number;
    IsNewVersion(): boolean;
    InIDE(): boolean;
    IsAPK(): boolean;
    IsService(): boolean;
    IsPremium(): boolean;
    IsEngine(): boolean;
    GetPackageName(): string | null;
    CheckLicense(key: string): void;
    GetAccounts(): string | null;
    GetUser(): string | null;
    GetDeviceId(): string | null;
    GetCountryCode(): string | null;
    GetLanguageCode(): string | null;
    GetCountry(): string | null;
    GetLanguage(): string | null;
    GetOptions(): string | null;
    GetSharedText(index: number): string | null;
    GetSharedFiles(): string[] | null;
    GetActivities(): any;
    IsAppInstalled(packageName: string): boolean;
    GetInstalledApps(): any;
    GetRunningApps(): any;
    GetRunningServices(): any;
    GetMemoryInfo(): any;
    GetIntent(): any;
    GetNotifyId(): string | null;
    SetSharedApp(name: string): void;
    GetMediaFile(appName: string, ext?: string): string | null;
    KillApp(procId: string): void;
    CreateShortcut(name: string, iconFile?: string, file?: string, options?: string): void;
    GetBuildNum(): number;
    GetOSVersion(): number;
    GetModel(): string | null;
    IsTablet(): boolean;
    IsChrome(): boolean;
    IsThings(): boolean;
    SetOnError(callback: Callback): void;
    SetOnDebug(callback: Callback): void;
    SetOnKey(callback: Callback): void;
    SetOnShowKeyboard(callback: Callback): void;
    SetOnWifiChange(callback: Callback): void;
    WifiScan(callback: Callback, options?: string): void;
    DisableKeys(keyList: string): void;
    DisableTouch(disable: boolean): void;
    GetIPAddress(): string | null;
    GetMacAddress(): string | null;
    GetSSID(): string | null;
    GetRSSI(): number;
    Broadcast(type: string, message: string): void;
    SetOnBroadcast(callback: Callback): void;
    SetData(name: string, value: string): void;
    GetData(name: string): string | null;
    SetClipboardText(text: string): void;
    GetClipboardText(): string | null;
    EnableBackKey(enable: boolean): void;
    Wait(secs: number): void;
    Alert(message: string, title?: string, options?: string, hue?: number): void;
    HideKeyboard(): void;
    ShowKeyboard(obj: DSView): boolean;
    IsKeyboardShown(): boolean;
    GetKeyboardHeight(): number;
    TextToSpeech(text: string, pitch: number, rate: number, callback: Callback, stream: string, locale: string, engine: string): void;
    Debug(message: string): void;
    Error(message: string, line: number, file: string, quit: boolean): void;
    SetDebugEnabled(enable: boolean): void;
    SetDebug(switches: string | boolean): void;
    IsDebugEnabled(): boolean;
    IsDebugging(): boolean;
    CreateDebug(): void;
    ShowDebug(show: boolean): void;
    SendMail(address: string, subject?: string, body?: string, attach?: string, type?: string, options?: string): void;
    SendFile(file: string, subject?: string, text?: string, choose?: string): void;
    SendText(text: string, subject?: string, choose?: string): void;
    SendImage(file: string, choose?: string): void;
    SendSMS(message: string, number: string): void;
    ExtractAssets(source: string, destination: string, overwrite?: boolean, options?: string): void;
    RedirectAssets(dir: string): void;
    ExtractPlugins(): void;
    GetResourceId(name: string, options?: string): number;
    Vibrate(pattern: string): void;
    ShowPopup(message: string, options?: string): void;
    ShowProgress(message: string, options: string): void;
    HideProgress(): void;
    ShowProgressBar(title: string, percent?: number, options?: string): void;
    UpdateProgressBar(percent: number): void;
    HideProgressBar(): void;
    LoadText(name: string, defaultValue?: string, file?: string): string | null;
    LoadNumber(name: string, defaultValue?: number, file?: string): number;
    LoadBoolean(name: string, defaultValue?: boolean, file?: string): boolean;
    SaveText(name: string, value: string, file?: string): void;
    SaveNumber(name: string, value: number, file?: string): void;
    SaveBoolean(name: string, value: boolean, file?: string): void;
    ClearData(file: string): void;
    ClearValue(name: string, file?: string): void;
    GetTop(): number;
    HasSoftNav(): boolean;
    IsNavBarOnRight(): boolean;
    GetScreenWidth(options?: string): number;
    GetScreenHeight(options?: string): number;
    GetScreenDensity(): number;
    GetDisplayWidth(): number;
    GetDisplayHeight(): number;
    GetDefaultOrientation(): string | null;
    GetOrientation(): string | null;
    IsPortrait(): boolean;
    SetOrientation(orientation: string, callback: Callback): void;
    GetRotation(): number;
    GetBatteryLevel(): number;
    IsCharging(): boolean;
    GetChargeType(): string | null;
    PreventScreenLock(mode?: string): void;
    PreventWifiSleep(): void;
    SetWifiEnabled(enable: boolean): void;
    IsWifiEnabled(): boolean;
    SetWifiApEnabled(enable: boolean, ssid: string, key: string): void;
    IsWifiApEnabled(): boolean;
    WifiConnect(ssid: string, key: string): void;
    IsConnected(): boolean;
    SetBluetoothEnabled(enable: boolean): void;
    IsBluetoothEnabled(): boolean;
    GetPairedBtDevices(): any;
    IsBtDevicePaired(name: string): boolean;
    DiscoverBtDevices(filter: string, onFound: Callback, onComplete: Callback): void;
    PairBtDevice(address: string, callback: Callback): void;
    UnpairBtDevice(address: string, callback: Callback): void;
    GetBtProfileState(type: string): string | null;
    GetBluetoothName(): string | null;
    GetBluetoothAddress(): string | null;
    IsLocationEnabled(types: string): boolean;
    SetMockLocation(latitude: number, longitude: number, accuracy?: number, speed?: number): void;
    PlayRingtone(type: string): void;
    SetRingerMode(mode: string): void;
    GetRingerMode(): string | null;
    SetSpeakerPhone(on: boolean): void;
    GetSpeakerPhone(): boolean;
    SetVolume(stream: string, level: number, options?: string): void;
    GetVolume(stream: string): number;
    SetTitle(title: string): void;
    SetMenu(list: string, iconPath?: string): void;
    ShowMenu(): void;
    Translate(cancel: string, ok: string): void;
    AddLayout(layout: DSLayout): void;
    RemoveLayout(layout: DSLayout): void;
    DestroyLayout(layout: DSLayout): void;
    AddDrawer(layout: DSLayout, side: Side, width: number, grabWidth: number): void;
    RemoveDrawer(side: Side): void;
    OpenDrawer(side: Side): void;
    CloseDrawer(side: Side): void;
    LockDrawer(side: Side): void;
    UnlockDrawer(side: Side): void;
    GetDrawerState(side: Side): string | null;
    MakeFolder(folder: string): void;
    GetPrivateFolder(name: string): string | null;
    GetDatabaseFolder(): string | null;
    DeleteDatabase(name: string): void;
    FolderExists(folder: string): boolean;
    FileExists(file: string): boolean;
    IsFolder(folder: string): boolean;
    ListFolder(path: string, filter?: string, limit?: number, options?: string): any;
    GetExternalFolder(): string | null;
    GetInternalFolder(): string | null;
    GetSpecialFolder(name: string): string | null;
    GetEnv(name: string): string | null;
    GetPermission(type: string, callback: Callback): void;
    CheckPermission(type: string): string | null;
    ReadFile(file: string, encoding?: string): string | null;
    WriteFile(file: string, text: string, mode?: string, encoding?: string): void;
    OpenFile(file: string, type?: string, choose?: string): void;
    OpenUrl(url: string, type?: string, choose?: string): void;
    DownloadFile(source: string, destination: string, title?: string, description?: string, options?: string): void;
    ChooseFile(message: string, type: string, callback: Callback, folder: string): void;
    ChooseContact(type: string, callback: Callback): void;
    ChooseImage(options: string, callback: Callback): void;
    ChooseAccount(callback: Callback): void;
    DeleteFile(file: string): void;
    CopyFile(source: string, destination: string): void;
    CopyFolder(source: string, destination: string, overwrite?: boolean, filter?: string): void;
    DeleteFolder(folder: string): void;
    RenameFile(source: string, destination: string): void;
    RenameFolder(source: string, destination: string): void;
    ReplaceInFile(file: string, text: string, replacementText: string, options?: string): void;
    UnzipFile(source: string, destination: string): void;
    ZipFile(source: string, destination: string): void;
    ZipFolder(source: string, destination: string): void;
    GetFreeSpace(mode: string): number;
    GetFileDate(file: string): Date | null;
    GetFileSize(file: string): number;
    GetThumbnail(source: string, destination: string, width: number, height: number): void;
    ScanFile(file: string): void;
    GetLastButton(): any;
    GetLastToggle(): any;
    GetLastCheckBox(): any;
    GetLastImage(): any;
    IsBluetoothOn(): boolean;
    IsScreenOn(): boolean;
    WakeUp(): void;
    GoToSleep(): void;
    Unlock(): void;
    Lock(): void;
    SetScreenBrightness(level: number): void;
    SetKioskMode(mode: string, enable: boolean, options?: string): void;
    GetMetadata(file: string, keys: string): string | null;
    SetAlarm(type: string, id: string, callback: Callback, time: string, interval?: number, options?: string): string | null;
    Call(number: string): void;
    SimulateTouch(obj: DSView, x: number, y: number, dir: "Down" | "Move" | "Up"): void;
    SimulateDrag(obj: DSView, x1: number, y1: number, x2: number, y2: number, step?: number, pause?: number): void;
    SimulateScroll(obj: DSView, x: number, y: number, dx: number, dy: number, count?: number, fling?: boolean): void;
    SimulateKey(obj: DSView, keyName: string, modifiers?: string, pause?: number): void;
    GetJoystickState(id: number, key: string): number;
    GetJoystickName(id: number): string | null;
    SetJoystickOptions(options?: string): void;
    SetAutoBoot(auto: string): void;
    SetAutoWifi(auto: boolean): void;
    SetAutoStart(appName: string): void;
    HttpRequest(type: string, baseUrl: string, path: string, params: string, callback: Callback, headers: string): void;
    UploadFile(url: string, file: string, name: string, callback: Callback): void;
    SaveCookies(): void;
    ClearCookies(session: string): void;
    SetUserAgent(agent: string): void;
    SetUserCreds(name: string, password: string): void;
    QueryContent(uri: string, columns: string, select: string, args: string, sort: string): any;
    Uri2Path(uri: string): string | null;
    ScreenShot(fileName: string, quality: string): void;
    InstallWallpaper(packageName: string, className: string): void;
    CreateLayout(type: string, options?: string): DSLayout | null;
    CreateImage(file: string, width: number, height: number, options?: string, w?: number, h?: number): DSImage | null;
    CreateButton(text?: string, width?: number, height?: number, options?: string): DSButton | null;
    CreateToggle(text?: string, width?: number, height?: number, options?: string): DSToggle | null;
    CreateCheckBox(text?: string, width?: number, height?: number, options?: string): DSCheckBox | null;
    CreateSpinner(list?: string, width?: number, height?: number, options?: string): DSSpinner | null;
    CreateSeekBar(width?: number, height?: number, options?: string): DSSeekbar | null;
    CreateText(text?: string, width?: number, height?: number, options?: string): DSText | null;
    CreateTextEdit(text?: string, width?: number, height?: number, options?: string): DSTextEdit | null;
    CreateList(list?: string, width?: number, height?: number, options?: string, delim?: string): DSList | null;
    CreateWebView(width?: number, height?: number, options?: string, zoom?: number): DSWebView | null;
    CreateScroller(width?: number, height?: number, options?: string): DSScroller | null;
    CreateCameraView(width?: number, height?: number, options?: string): DSCameraView | null;
    CreateVideoView(width?: number, height?: number, options?: string): DSVideoView | null;
    CreateCodeEdit(text?: string, width?: number, height?: number, options?: string): DSCodeEdit | null;
    CreateAdView(unitId: string, testId: string, width: number, height: number, options?: string): DSAdView | null;
    CreateTheme(baseTheme?: string): DSTheme | null;
    CreateYesNoDialog(message?: string, options?: string): any;
    CreateListDialog(title?: string, list?: string, options?: string): any;
    CreateBluetoothList(filter?: string): any;
    CreateAudioRecorder(): any;
    CreateSMS(): any;
    CreateEmail(account?: string, password?: string): any;
    CreateSmartWatch(type?: string): any;
    CreateCrypt(options?: string): any;
    CreateSpeechRec(options?: string): any;
    CreatePhoneState(types?: string): any;
    CreateWallpaper(options?: string): any;
    CreateDialog(title?: string, options?: string): DSDialog | null;
    CreateOverlay(options?: string): DSOverlay | null;
    CreateMediaPlayer(): DSMediaPlayer | null;
    CreateSensor(type?: string, options?: string): DSSensor | null;
    CreateLocator(type?: string, options?: string): DSLocator | null;
    CreateNetClient(type?: string): DSNetClient | null;
    CreateWebServer(port?: string, options?: string): DSWebserver | null;
    CreateUSBSerial(baudRate: number, dataBits: number, stopBits: number, parity: number, device: number): DSUsbSerial | null;
    CreateSysProc(cmd?: string, env?: string, dir?: string, options?: string): DSSysProc | null;
    CreateService(packageName?: string, className?: string, callback?: Callback, options?: string): DSService | null;
    CreateSynth(type?: string): DSSynth | null;
    CreateBluetoothSerial(mode?: string): DSBluetoothSerial | null;
    CreateZipUtil(mode?: string): DSZipUtil | null;
    CreateDownloader(options?: string): DSDownloader | null;
    CreateMediaStore(): DSMediaStore | null;
    CreatePlayStore(): DSPlayStore | null;
    CreateNotification(options?: string): DSNotification | null;
    CreateFile(file?: string, mode?: string): DSFile | null;
    Start(): void;
    CreateObject(name: string, type: string): any;
    Animate(callback: Callback, fps?: number): void;
    Language2Code(name: string): any;
    SetLanguage(name: string): void;
    CreateTabs(list: string, width?: number, height?: number, options?: string): void;
    CreateWebSocket(id: string, ip: string, port: number, options?: string): DSWebSock;
    CreateWizard(title?: string, width?: number, height?: number, callback?: Callback, options?: string): void;
    CreateGame(file?: string, orient?: string): void;
    ShowTextDialog(title: string, defaultValue: string, callback: Callback): void;
    ShowCheckList(title?: string, list?: string, callback?: Callback, width?: number, height?: number, options?: string): void;
    ShowTip(message: string, left: number, top: number, timeOut: number, options?: string): void;
    PlaySound(file: string): void;
    ChooseWifi(title1?: string, title2?: string, callback?: Callback, options?: string, extra?: string): void;
    CreateGameView(width?: number, height?: number, options?: string): any;
    CreateGLView(width?: number, height?: number, options?: string): void;
    OpenDatabase(name: string): DSDatabase;
}